import 'dart:convert';
import 'package:credit_card_project/models/user.dart';
import 'package:credit_card_project/services/authRepository.dart';
import 'package:credit_card_project/services/cachingServices.dart';
import 'package:credit_card_project/services/userDbServices.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

enum LoginStatus { loading, idle, loggedIn, error }

class AuthService with ChangeNotifier {
  String _error = "";
  LoginStatus _status = LoginStatus.loading;
  String _accessToken = '';
  String _refreshToken = '';

  String get jwt => 'Bearer $_accessToken';

  String get error => _error;

  LoginStatus get status => _status;
  late User me;

  AuthService() {
    _initialise();
  }

  /// resets the auth service values
  void _clear() {
    _error = "";
    _status = LoginStatus.idle;
    _accessToken = "";
    _refreshToken = "";
    notifyListeners();
  }

  /// An async function which takes input **username** and **password**
  /// and returns a bool value, as success or failure
  Future<bool> login(
      {required String username, required String password}) async {
    _status = LoginStatus.loading;
    notifyListeners();
    try {
      final resp =
          await authRepository.login(username: username, password: password);
      me = resp.data;
      _saveToken(resp.tokens);
      _status = LoginStatus.loggedIn;
      return true;
    } catch (e) {
      _status = LoginStatus.idle;
      _error = e.toString();
      rethrow;
    } finally {
      notifyListeners();
    }
  }

  /// Takes input three arguments
  /// * an email address
  /// * a password
  /// * a display name
  /// and returns a future bool status
  Future<bool> signup(
      {required String email,
      required String password,
      required String displayName}) async {
    try {
      final resp = await authRepository.signup(
          email: email, password: password, displayName: displayName);
      me = resp.data;
      _saveToken(resp.tokens);
      _status = LoginStatus.loggedIn;
      return true;
    } catch (e) {
      _status = LoginStatus.idle;
      _error = e.toString();
      rethrow;
    } finally {
      notifyListeners();
    }
  }

  /// An async function which takes input **email**
  /// and returns a bool value, as success or failure
  Future<bool> resendVerification({required String email}) async {
    return authRepository.resendVerification(email: email);
  }

  /// An async function which takes input **email**
  /// and returns a bool value, as success or failure
  Future<bool> forgotPassword({required String email}) async {
    return authRepository.forgotPassword(email: email);
  }

  Future _initialise() async {
    const _storage = FlutterSecureStorage();
    _accessToken = (await _storage.read(key: "token")) ?? "";
    _refreshToken = (await _storage.read(key: "refreshToken")) ?? "";
    print(_accessToken);
    if (_accessToken != '' && _refreshToken != '') {
      // _fetchInfo();
      _status = LoginStatus.loggedIn;
      notifyListeners();
    } else {
      _status = LoginStatus.idle;
      notifyListeners();
    }
  }

  void updateMyData(User m) {
    me = m;
    notifyListeners();
  }

  Future _serverFetch() async {
    try {
      me = await userDBServices.myData(token: jwt);
      _status = LoginStatus.loggedIn;
      notifyListeners();
    } catch (e) {
      _status = LoginStatus.idle;
      notifyListeners();
    }
  }

  Future _fetchInfo() async {
    // _cacheFetch();
    // _serverFetch();
  }

  /// Saves token generated by server in a secure storage
  Future _saveToken(Map tokens) async {
    String token = tokens["access"]["token"];
    String refreshToken = tokens["refresh"]["token"];
    const _storage = FlutterSecureStorage();
    await _storage.write(key: "token", value: token);
    await _storage.write(key: "refreshToken", value: refreshToken);
    _refreshToken = refreshToken;
    _accessToken = token;
  }

  /// Logs out the user, and delete the secure token
  Future<void> logout() async {
    await authRepository.logout(jwt: jwt, refreshToken: _refreshToken);
    const _storage = FlutterSecureStorage();
    await _storage.delete(key: "token");
    await _storage.delete(key: "refreshToken");
    _clear();
    _status = LoginStatus.idle;
    notifyListeners();
  }

  // Future _cacheFetch() async {
  //   final cache = await cachingServices.getCachedUserData();
  //   me = User.fromMap(cache);
  //   _status = LoginStatus.loggedIn;
  //   notifyListeners();
  // }
}
